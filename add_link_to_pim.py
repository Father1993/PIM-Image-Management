#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ PIM –≤ Excel —Ñ–∞–π–ª products.xlsx
–ß–∏—Ç–∞–µ—Ç Excel, –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –≤ Supabase –ø–æ code_1c, –¥–æ–±–∞–≤–ª—è–µ—Ç link_pim
"""
import os
import pandas as pd
import asyncio
from supabase import create_client
from dotenv import load_dotenv
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")


class ExcelPimLinker:
    def __init__(self):
        self.supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        self.excel_file = "products.xlsx"

    def read_excel_file(self):
        """–ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤ 1–°"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(self.excel_file)
            logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω Excel —Ñ–∞–π–ª: {len(df)} —Å—Ç—Ä–æ–∫")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–¥–æ–º 1–°
            code_1c_column = None
            for col in df.columns:
                if "–∫–æ–¥" in col.lower() and "1—Å" in col.lower():
                    code_1c_column = col
                    break

            if not code_1c_column:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–¥–æ–º 1–° –≤ Excel —Ñ–∞–π–ª–µ")
                return None

            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–¥–æ–º 1–°: {code_1c_column}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã 1–° (—É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º .0 –∏–∑ —á–∏—Å–µ–ª)
            codes_1c = df[code_1c_column].dropna().astype(str).tolist()
            codes_1c = [
                code.replace(".0", "") if code.endswith(".0") else code
                for code in codes_1c
                if code.strip()
            ]

            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(codes_1c)} –∫–æ–¥–æ–≤ 1–°")
            logger.info(f"–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤ 1–°: {codes_1c[:5]}")
            return df, code_1c_column, codes_1c

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            return None

    async def get_link_pim_from_supabase(self, codes_1c):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ PIM –∏–∑ Supabase –ø–æ –∫–æ–¥–∞–º 1–°"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table_names = ["product", "products", "Product", "Products"]
            table_found = None

            for table_name in table_names:
                try:
                    test = (
                        self.supabase.table(table_name).select("id").limit(1).execute()
                    )
                    table_found = table_name
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
                    break
                except:
                    continue

            if not table_found:
                logger.error("–¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase")
                return {}

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏ (Supabase –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ IN –∑–∞–ø—Ä–æ—Å—ã)
            batch_size = 100
            all_products = {}

            for i in range(0, len(codes_1c), batch_size):
                batch_codes = codes_1c[i : i + batch_size]

                # –ó–∞–ø—Ä–æ—Å –∫ Supabase
                response = (
                    self.supabase.table(table_found)
                    .select("code_1c, link_pim")
                    .in_("code_1c", batch_codes)
                    .execute()
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for product in response.data:
                    code_1c = product.get("code_1c")
                    link_pim = product.get("link_pim")
                    if code_1c and link_pim:
                        all_products[code_1c] = link_pim

                logger.info(
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(i + batch_size, len(codes_1c))}/{len(codes_1c)} –∫–æ–¥–æ–≤"
                )

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ PIM")
            return all_products

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Supabase: {e}")
            return {}

    def update_excel_with_links(self, df, code_1c_column, link_pim_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ PIM –≤ Excel"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Å—ã–ª–æ–∫ PIM
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã 1–° –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            df_codes_normalized = (
                df[code_1c_column]
                .astype(str)
                .apply(lambda x: x.replace(".0", "") if x.endswith(".0") else x)
            )
            df["–°—Å—ã–ª–∫–∞ PIM"] = df_codes_normalized.map(link_pim_data)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_rows = len(df)
            found_links = df["–°—Å—ã–ª–∫–∞ PIM"].notna().sum()

            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {found_links} —Å—Å—ã–ª–æ–∫ –∏–∑ {total_rows} —Ç–æ–≤–∞—Ä–æ–≤")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"products_with_pim_links_{timestamp}.xlsx"

            df.to_excel(output_file, index=False)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_file}")

            return output_file, found_links, total_rows

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            return None, 0, 0


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        linker = ExcelPimLinker()

        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        logger.info("üîç –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")
        excel_data = linker.read_excel_file()
        if not excel_data:
            return

        df, code_1c_column, codes_1c = excel_data

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ PIM –∏–∑ Supabase
        logger.info("üîó –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ PIM –∏–∑ Supabase...")
        link_pim_data = await linker.get_link_pim_from_supabase(codes_1c)

        if not link_pim_data:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ PIM")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        logger.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")
        result = linker.update_excel_with_links(df, code_1c_column, link_pim_data)

        if result[0]:  # output_file
            output_file, found_links, total_rows = result
            logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª: {output_file}")
            logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {found_links}/{total_rows} —Å—Å—ã–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
