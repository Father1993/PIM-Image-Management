import aiohttp
import asyncio
import os
import base64
from datetime import datetime
import logging
from supabase import create_client
import time
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("image_optimizer.log"), logging.StreamHandler()]
)
logger = logging.getLogger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PIM_API_URL = "https://pim.uroven.pro/api/v1"
PIM_LOGIN = os.getenv("PIM_LOGIN", "s.andrey")
PIM_PASSWORD = os.getenv("PIM_PASSWORD", "KZh-4g2-YFx-Jgm")
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://supabase.uroven.pro")
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIn0.4AiJtu9AAgqihOClCQBLGLI3ZrqOfcbyp6_035gGHr0")
IMGPROXY_URL = "https://images.uroven.pro"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
semaphore = asyncio.Semaphore(10)

async def get_auth_token(session):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    auth_data = {
        "login": PIM_LOGIN,
        "password": PIM_PASSWORD,
        "remember": True
    }
    try:
        async with session.post(f"{PIM_API_URL}/sign-in/", json=auth_data) as response:
            if response.status == 200:
                data = await response.json()
                if data["success"]:
                    return data["data"]["access"]["token"]
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {await response.text()}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

async def get_product_details(session, token, product_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        async with semaphore, session.get(f"{PIM_API_URL}/product/{product_id}", headers=headers) as response:
            if response.status == 200:
                return await response.json()
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ {product_id}. –ö–æ–¥: {response.status}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ {product_id}: {str(e)}")
        return None


async def optimize_image_via_imgproxy(session, original_image_url):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ imgproxy"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        async with session.head(original_image_url) as check_response:
            if check_response.status != 200:
                logger.warning(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {original_image_url} (–∫–æ–¥: {check_response.status})")
                return None, None
        
        # –ö–æ–¥–∏—Ä—É–µ–º URL –≤ Base64 –¥–ª—è imgproxy
        b64_url = base64.urlsafe_b64encode(original_image_url.encode()).decode().rstrip("=")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º imgproxy URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
        # unsafe - –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (—Ç.–∫. –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞)
        # resize:fill:750:1000 - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–æ 750x1000 —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        # extend:1:ce - —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å —Ñ–æ–Ω–æ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        # quality:85 - –∫–∞—á–µ—Å—Ç–≤–æ 85%
        # .jpeg - –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç
        imgproxy_url = f"{IMGPROXY_URL}/unsafe/resize:fill:750:1000/extend:1:ce/quality:85/{b64_url}.jpeg"
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ imgproxy: {imgproxy_url}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        async with semaphore, session.get(imgproxy_url) as response:
            if response.status == 200:
                return await response.read(), imgproxy_url
            logger.warning(f"–û—à–∏–±–∫–∞ imgproxy –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ö–æ–¥: {response.status}")
            if response.status == 404:
                logger.warning(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {original_image_url}")
            return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ imgproxy: {str(e)}")
        return None, None

async def upload_image_to_pim(session, token, product_id, image_data):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PIM"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        form_data = aiohttp.FormData()
        form_data.add_field('file', image_data, 
                           filename=f'optimized_{datetime.now().strftime("%Y%m%d%H%M%S")}.jpg',
                           content_type='image/jpeg')
        
        async with semaphore, session.post(f"{PIM_API_URL}/product/{product_id}/upload-picture", 
                                headers=headers, data=form_data) as response:
            if response.status == 200:
                return await response.json()
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}. –ö–æ–¥: {response.status}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {str(e)}")
        return None

async def delete_image_from_pim(session, token, product_id, picture_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PIM"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        async with semaphore, session.delete(f"{PIM_API_URL}/product/{product_id}/picture/{picture_id}", 
                            headers=headers) as response:
            if response.status == 200:
                return await response.json()
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {picture_id} —Ç–æ–≤–∞—Ä–∞ {product_id}. –ö–æ–¥: {response.status}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {picture_id} —Ç–æ–≤–∞—Ä–∞ {product_id}: {str(e)}")
        return None

async def scan_product_images(session, token):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –≤ –ë–î"""
    logger.info("üìã –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ product_backup
    try:
        response = supabase.table('product_backup').select('id, code_1c').execute()
        products = response.data if response.data else []
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
        return 0
    
    scanned_count = 0
    for product in products:
        product_id = product['id']
        code_1c = product.get('code_1c', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ PIM
        product_details = await get_product_details(session, token, product_id)
        if not product_details or not product_details.get("data"):
            continue
            
        product_data = product_details["data"]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏
        main_picture = product_data.get("picture")
        if main_picture and main_picture.get("name"):
            # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            additional_pictures = product_data.get("pictures", [])
            additional_urls = []
            additional_ids = []
            
            for pic in additional_pictures:
                if pic and pic.get("name"):
                    ext = pic.get("type", "JPG").split("/")[-1].upper() if pic.get("type") else "JPG"
                    additional_urls.append(f"https://pim.uroven.pro/pictures/originals/{pic['name']}.{ext}")
                    if pic.get("id"):
                        additional_ids.append(str(pic.get("id")))
            
            # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            ext = main_picture.get("type", "JPG").split("/")[-1].upper() if main_picture.get("type") else "JPG"
            image_data = {
                'product_id': product_id,
                'product_code_1c': code_1c,
                'image_name': f"{main_picture['name']}.{ext}",
                'image_url': f"https://pim.uroven.pro/pictures/originals/{main_picture['name']}.{ext}",
                'image_type': 'main',
                'picture_id': str(main_picture.get("id", "")),
                'additional_image_urls': ",".join(additional_urls) if additional_urls else None,
                'additional_picture_ids': ",".join(additional_ids) if additional_ids else None
            }
            
            try:
                supabase.table('product_images').upsert(image_data).execute()
                scanned_count += 1
                logger.info(f"–¢–æ–≤–∞—Ä {product_id}: –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ {len(additional_urls)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {scanned_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return scanned_count

async def optimize_images(session, limit=None):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ imgproxy"""
    logger.info("–ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    query = supabase.table('product_images').select('*').eq('is_optimized', False)
    if limit:
        query = query.limit(limit)
        
    try:
        response = query.execute()
        images = response.data if response.data else []
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
        return 0
    
    optimized_count = 0
    for image in images:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ imgproxy
        result = await optimize_image_via_imgproxy(session, image['image_url'])
        if result and result[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
            optimized_data, optimized_url = result
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                supabase.table('product_images').update({
                    'is_optimized': True,
                    'optimized_url': optimized_url
                }).eq('id', image['id']).execute()
                
                optimized_count += 1
                logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {image['image_name']} (Product ID: {image['product_id']})")
                
                # –î–ª—è —Ä–µ–∂–∏–º–∞ preview –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
                if limit and limit <= 5:
                    logger.info(f"Product ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {image['product_id']}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    logger.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {optimized_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return optimized_count

async def upload_optimized_images(session, token, limit=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PIM"""
    logger.info("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    query = supabase.table('product_images').select('*').eq('is_optimized', True).eq('is_uploaded', False)
    if limit:
        query = query.limit(limit)
        
    try:
        response = query.execute()
        images = response.data if response.data else []
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
        return 0
    
    uploaded_count = 0
    for image in images:
        # –°–∫–∞—á–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = await optimize_image_via_imgproxy(session, image['image_url'])
        if result and result[0]:
            optimized_data, _ = result
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIM
            upload_result = await upload_image_to_pim(session, token, image['product_id'], optimized_data)
            if upload_result and upload_result.get("success"):
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å picture_id
                if image['picture_id']:
                    await delete_image_from_pim(session, token, image['product_id'], image['picture_id'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                try:
                    supabase.table('product_images').update({
                        'is_uploaded': True,
                        'updated_at': datetime.now().isoformat()
                    }).eq('id', image['id']).execute()
                    
                    uploaded_count += 1
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {image['image_name']} (Product ID: {image['product_id']})")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return uploaded_count

async def clean_unavailable_images(session, limit=None):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("–û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    try:
        query = supabase.table('product_images').select('id, image_url')
        if limit:
            query = query.limit(limit)
        response = query.execute()
        images = response.data if response.data else []
        
        if limit:
            logger.info(f"–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        else:
            logger.info(f"–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        removed_count = 0
        for i, image in enumerate(images):
            if i % 10 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {i}/{len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
                
            try:
                async with session.head(image['image_url']) as check_response:
                    if check_response.status != 200:
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        supabase.table('product_images').delete().eq('id', image['id']).execute()
                        removed_count += 1
                        if removed_count <= 10:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —É–¥–∞–ª–µ–Ω–∏–π
                            logger.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ: {image['image_url']}")
            except Exception:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ - —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º
                supabase.table('product_images').delete().eq('id', image['id']).execute()
                removed_count += 1
        
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return removed_count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
        return 0

async def preview_images(session, token):
    """–†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ 1-5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("–†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê - –æ–±—Ä–∞–±–æ—Ç–∫–∞ 1-5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è preview (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π)
    await clean_unavailable_images(session, limit=20)
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    try:
        response = supabase.table('product_backup').select('id, code_1c').limit(5).execute()
        products = response.data if response.data else []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
        return
    
    # –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    scanned_count = 0
    for product in products:
        product_id = product['id']
        product_details = await get_product_details(session, token, product_id)
        if product_details and product_details.get("data"):
            product_data = product_details["data"]
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è preview
            main_picture = product_data.get("picture")
            if main_picture and main_picture.get("name"):
                image_url = f"https://pim.uroven.pro/pictures/originals/{main_picture['name']}.JPG"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    async with session.head(image_url) as check_response:
                        if check_response.status == 200:
                            image_data = {
                                'product_id': product_id,
                                'product_code_1c': product.get('code_1c', ''),
                                'image_name': main_picture["name"] + ".JPG",
                                'image_url': image_url,
                                'image_type': 'main',
                                'picture_id': str(main_picture.get("id", "")),
                                'additional_image_urls': None,
                                'additional_picture_ids': None
                            }
                            supabase.table('product_images').upsert(image_data).execute()
                            scanned_count += 1
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                            
                            if scanned_count >= 3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è preview
                                break
                except Exception:
                    continue
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {scanned_count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await optimize_images(session, limit=5)
    
    logger.info("\n–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ Product ID –≤ PIM")

async def main(mode='full'):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    
    –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
    - scan: —Ç–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - optimize: —Ç–æ–ª—å–∫–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è 
    - upload: —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞
    - preview: —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (1-5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    - clean: –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - full: –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: {mode.upper()}")
    
    async with aiohttp.ClientSession() as session:
        # –†–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if mode == 'clean':
            await clean_unavailable_images(session)  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
        token = await get_auth_token(session)
        if not token:
            logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
            return
        
        if mode == 'preview':
            await preview_images(session, token)
            return
        
        if mode in ['scan', 'full']:
            await scan_product_images(session, token)
        
        if mode in ['optimize', 'full']:
            await optimize_images(session)
        
        if mode in ['upload', 'full']:
            await upload_optimized_images(session, token)
        
        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def test_imgproxy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ imgproxy —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    test_url = "https://pim.uroven.pro/pictures/originals/test.JPG"
    async with aiohttp.ClientSession() as session:
        result = await optimize_image_via_imgproxy(session, test_url)
        if result and result[0]:
            logger.info("–¢–µ—Å—Ç imgproxy –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(result[0])} –±–∞–π—Ç")
            return True
        else:
            logger.error("–¢–µ—Å—Ç imgproxy –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
            return False

if __name__ == "__main__":
    start_time = time.time()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    mode = 'full'
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        if mode not in ['scan', 'optimize', 'upload', 'preview', 'clean', 'full', 'test']:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
            logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
            logger.info("  python optimized.py scan      - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            logger.info("  python optimized.py optimize  - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π") 
            logger.info("  python optimized.py upload    - –∑–∞–≥—Ä—É–∑–∫–∞ –≤ PIM")
            logger.info("  python optimized.py preview   - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (1-5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            logger.info("  python optimized.py clean     - –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            logger.info("  python optimized.py full      - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            logger.info("  python optimized.py test      - —Ç–µ—Å—Ç imgproxy")
            sys.exit(1)
    
    try:
        if mode == 'test':
            asyncio.run(test_imgproxy())
        else:
            asyncio.run(main(mode))
        logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time.time() - start_time:.2f} —Å–µ–∫.")
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
        sys.exit(1)