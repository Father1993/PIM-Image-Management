import aiohttp
import asyncio
import os
import base64
import logging
from datetime import datetime
from supabase import create_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PIM_API_URL = os.getenv("PIM_API_URL")
PIM_LOGIN = os.getenv("PIM_LOGIN")
PIM_PASSWORD = os.getenv("PIM_PASSWORD")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
IMGPROXY_URL = "https://images.uroven.pro"

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

async def get_auth_token(session):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ PIM"""
    auth_data = {"login": PIM_LOGIN, "password": PIM_PASSWORD, "remember": True}
    async with session.post(f"{PIM_API_URL}/sign-in/", json=auth_data) as response:
        if response.status == 200:
            data = await response.json()
            if data["success"]:
                return data["data"]["access"]["token"]
    logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    return None

async def optimize_image(session, image_url):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ imgproxy"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        async with session.head(image_url) as check:
            if check.status != 200:
                return None, None
        
        # –ö–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è imgproxy
        b64_url = base64.urlsafe_b64encode(image_url.encode()).decode().rstrip("=")
        imgproxy_url = f"{IMGPROXY_URL}/unsafe/resize:fill:750:1000/extend:1:ce/quality:85/{b64_url}.jpeg"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        async with session.get(imgproxy_url) as response:
            if response.status == 200:
                return await response.read(), imgproxy_url
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return None, None

async def upload_to_pim(session, token, product_id, image_data):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PIM"""
    headers = {"Authorization": f"Bearer {token}"}
    form_data = aiohttp.FormData()
    form_data.add_field('file', image_data, 
                       filename=f'opt_{datetime.now().strftime("%Y%m%d%H%M%S")}.jpg',
                       content_type='image/jpeg')
    
    try:
        async with session.post(f"{PIM_API_URL}/product/{product_id}/upload-picture", 
                               headers=headers, data=form_data) as response:
            return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False

async def delete_from_pim(session, token, product_id, picture_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PIM"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        async with session.delete(f"{PIM_API_URL}/product/{product_id}/picture/{picture_id}", 
                                 headers=headers) as response:
            return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return False

async def process_image(session, token, image_record):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è -> –∑–∞–≥—Ä—É–∑–∫–∞ -> —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ"""
    image_id = image_record['id']
    product_id = image_record['product_id']
    image_url = image_record['image_url']
    picture_id = image_record.get('picture_id')
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_record['image_name']} (Product: {product_id})")
    
    # 1. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
    optimized_data, optimized_url = await optimize_image(session, image_url)
    if not optimized_data:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id}")
        return False
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PIM
    if not await upload_to_pim(session, token, product_id, optimized_data):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id}")
        return False
    
    # 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑ PIM (–µ—Å–ª–∏ –µ—Å—Ç—å picture_id)
    if picture_id:
        await delete_from_pim(session, token, product_id, picture_id)
    
    # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    try:
        supabase.table('product_images').update({
            'is_optimized': True,
            'is_uploaded': True,
            'optimized_url': optimized_url,
            'updated_at': datetime.now().isoformat()
        }).eq('id', image_id).execute()
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_record['image_name']}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        return False

async def main(limit=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ë–î"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    query = supabase.table('product_images').select('*').eq('is_optimized', False)
    if limit:
        query = query.limit(limit)
    
    try:
        response = query.execute()
        images = response.data or []
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return
    
    if not images:
        logger.info("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    async with aiohttp.ClientSession() as session:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        token = await get_auth_token(session)
        if not token:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
        
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        success_count = 0
        semaphore = asyncio.Semaphore(5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        async def process_with_limit(image):
            async with semaphore:
                return await process_image(session, token, image)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [process_with_limit(image) for image in images]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ
        for result in results:
            if result is True:
                success_count += 1
        
        logger.info(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

if __name__ == "__main__":
    import sys
    limit = int(sys.argv[1]) if len(sys.argv) > 1 and sys.argv[1].isdigit() else None
    if limit:
        logger.info(f"–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {limit} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    asyncio.run(main(limit))