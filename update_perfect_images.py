#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_perfect = true –≤ —Ç–∞–±–ª–∏—Ü–µ product_images
–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞ products_reference_750x1000.xlsx
"""

import os
import asyncio
import pandas as pd
from supabase import create_client
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not SUPABASE_URL or not SUPABASE_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY")
    exit(1)


class PerfectImageUpdater:
    def __init__(self):
        self.client = create_client(SUPABASE_URL, SUPABASE_KEY)
        self.table_name = None

    def find_product_images_table(self):
        """–ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É product_images –≤ Supabase"""
        possible_names = [
            "product_images",
            "ProductImages",
            "productImages",
            "product_image",
        ]

        for table_name in possible_names:
            try:
                # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ
                test = self.client.table(table_name).select("id").limit(1).execute()
                self.table_name = table_name
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
                continue

        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ product_images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    def read_excel_file(self, file_path):
        """–ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å ID —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)
            print(f"üìÇ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ: {df.columns.tolist()}")
            print(f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")

            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å ID —Ç–æ–≤–∞—Ä–æ–≤
            id_column = None
            possible_id_columns = [
                "id",
                "ID",
                "Id",
                "product_id",
                "ID —Ç–æ–≤–∞—Ä–∞",
                "—Ç–æ–≤–∞—Ä_id",
            ]

            for col in possible_id_columns:
                if col in df.columns:
                    id_column = col
                    break

            if not id_column:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                id_column = df.columns[0]
                print(
                    f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É: {id_column}"
                )

            print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É: {id_column}")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ ID
            valid_rows = []
            for index, value in df[id_column].items():
                if pd.notna(value):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
                        product_id = int(value)
                        if product_id > 0:  # ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
                            valid_rows.append(product_id)
                    except (ValueError, TypeError):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {index}: '{value}' (–Ω–µ —á–∏—Å–ª–æ)")
                        continue

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(valid_rows)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID —Ç–æ–≤–∞—Ä–æ–≤")

            if len(valid_rows) > 0:
                print(f"üìù –ü–µ—Ä–≤—ã–µ 10 ID: {valid_rows[:10]}")
                print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 ID: {valid_rows[-10:]}")

            return valid_rows

        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return []

    async def update_perfect_images_batch(self, product_ids, batch_size=50):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_perfect –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏"""
        total_updated = 0
        total_errors = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏
        for i in range(0, len(product_ids), batch_size):
            batch = product_ids[i : i + batch_size]
            print(
                f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: —Ç–æ–≤–∞—Ä—ã {i+1}-{min(i+batch_size, len(product_ids))}"
            )

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                response = (
                    self.client.table(self.table_name)
                    .update({"is_perfect": True})
                    .in_("product_id", batch)
                    .execute()
                )

                updated_count = len(response.data) if response.data else 0
                total_updated += updated_count

                print(
                    f"‚úÖ –ü–∞–∫–µ—Ç {i//batch_size + 1}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π"
                )

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: {e}")
                total_errors += len(batch)
                continue

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            await asyncio.sleep(0.1)

        return total_updated, total_errors

    async def get_affected_records_count(self, product_ids, batch_size=1000):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–ø–∞–∫–µ—Ç–Ω–æ)"""
        total_count = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö URL
        for i in range(0, len(product_ids), batch_size):
            batch = product_ids[i : i + batch_size]
            try:
                response = (
                    self.client.table(self.table_name)
                    .select("id", count="exact")
                    .in_("product_id", batch)
                    .execute()
                )

                batch_count = (
                    response.count if hasattr(response, "count") else len(response.data)
                )
                total_count += batch_count

                if i % (batch_size * 5) == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–∞–∫–µ—Ç–æ–≤
                    print(
                        f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {min(i + batch_size, len(product_ids))}/{len(product_ids)} —Ç–æ–≤–∞—Ä–æ–≤..."
                    )

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: {e}")
                continue

        return total_count

    async def verify_updates(self, product_ids, batch_size=1000):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–∞–∫–µ—Ç–Ω–æ)"""
        perfect_count = 0
        total_count = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏
        for i in range(0, len(product_ids), batch_size):
            batch = product_ids[i : i + batch_size]
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞–ª–∏ is_perfect = true
                perfect_response = (
                    self.client.table(self.table_name)
                    .select("id", count="exact")
                    .in_("product_id", batch)
                    .eq("is_perfect", True)
                    .execute()
                )

                batch_perfect = (
                    perfect_response.count
                    if hasattr(perfect_response, "count")
                    else len(perfect_response.data)
                )
                perfect_count += batch_perfect

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                total_response = (
                    self.client.table(self.table_name)
                    .select("id", count="exact")
                    .in_("product_id", batch)
                    .execute()
                )

                batch_total = (
                    total_response.count
                    if hasattr(total_response, "count")
                    else len(total_response.data)
                )
                total_count += batch_total

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: {e}")
                continue

        return perfect_count, total_count


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_perfect –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    updater = PerfectImageUpdater()

    # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã product_images
    if not updater.find_product_images_table():
        return

    # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    excel_file = "products_reference_750x1000.xlsx"
    product_ids = updater.read_excel_file(excel_file)

    if not product_ids:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –±—É–¥–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {updater.table_name}...")
    affected_count = await updater.get_affected_records_count(product_ids)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {affected_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    if affected_count == 0:
        print("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print(f"\n‚ö° –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_perfect = true –¥–ª—è {affected_count} –∑–∞–ø–∏—Å–µ–π")
    print(f"üìù –¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(product_ids)}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    updated_count, error_count = await updater.update_perfect_images_batch(product_ids)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    perfect_count, total_count = await updater.verify_updates(product_ids)

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –∑–∞–ø–∏—Å–µ–π")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üéØ –ó–∞–ø–∏—Å–µ–π —Å is_perfect = true: {perfect_count}")
    print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {total_count}")

    if perfect_count > 0:
        print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    asyncio.run(main())
