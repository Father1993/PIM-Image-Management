#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–°–ò–ù–•–†–û–ù–ù–´–ô —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —à–∏—Ä–∏–Ω–æ–π –±–æ–ª–µ–µ 750px
"""

import requests
import asyncio
import aiohttp
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter
from PIL import Image
from io import BytesIO
import logging

class AsyncBigImageChecker:
    def __init__(self):
        self.token = None
        self.base_url = "https://pim.uroven.pro/api/v1"
        self.headers = {"Content-Type": "application/json"}
        self.image_cache = {}
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    def authenticate(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        response = requests.post(
            f"{self.base_url}/sign-in/",
            json={
                "login": "s.andrey",
                "password": "KZh-4g2-YFx-Jgm",
                "remember": True
            },
            headers=self.headers
        )
        response.raise_for_status()
        self.token = response.json()["data"]["access"]["token"]
        self.headers["Authorization"] = f"Bearer {self.token}"
    
    async def get_products_with_big_images(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —à–∏—Ä–∏–Ω–æ–π –±–æ–ª–µ–µ 750px"""
        scroll_id = None
        products_with_big_images = []
        batch_num = 0
        total_processed = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        connector = aiohttp.TCPConnector(limit=50, limit_per_host=20)
        timeout = aiohttp.ClientTimeout(total=5)
        
        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            while True:
                batch_num += 1
                url = f"{self.base_url}/product/scroll"
                if scroll_id:
                    url += f"?scrollId={scroll_id}"
                
                # API —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–ª–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
                response = requests.get(url, headers=self.headers)
                response.raise_for_status()
                response_data = response.json()
                
                if not response_data.get("success", False):
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    break
                
                data = response_data.get("data", {})
                current_batch = data.get("productElasticDtos", [])
                total_products = data.get("total", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                if not current_batch:
                    print("‚õî –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    break
                
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–∞–∫–µ—Ç–µ
                tasks = []
                for product in current_batch:
                    tasks.append(self.check_product_images_async(session, product))
                
                results = await asyncio.gather(*tasks)
                
                batch_big_images = 0
                for product, big_images in zip(current_batch, results):
                    total_processed += 1
                    if big_images:
                        batch_big_images += 1
                        products_with_big_images.append({
                            "id": product.get("id"),
                            "code_1c": product.get("articul", ""),
                            "header": product.get("header", ""),
                            "big_images": big_images
                        })
                
                if batch_num % 5 == 0 or batch_big_images > 0:  # –ß–∞—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    print(f"üöÄ –ü–∞–∫–µ—Ç {batch_num}: {total_processed}/{total_products} —Ç–æ–≤–∞—Ä–æ–≤ | –ù–∞–π–¥–µ–Ω–æ: {len(products_with_big_images)}")
                
                scroll_id = data.get("scrollId")
                if not scroll_id:
                    print("‚õî –ù–µ—Ç scrollId, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    break
                    
        return products_with_big_images
    
    async def check_product_images_async(self, session, product):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
        tasks = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        picture = product.get("picture")
        if picture:
            tasks.append(self.get_image_info_async(session, picture, "–û—Å–Ω–æ–≤–Ω–æ–µ"))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pictures = product.get("pictures", [])
        for pic in pictures:
            tasks.append(self.get_image_info_async(session, pic, "–î–æ–ø."))
        
        if not tasks:
            return []
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        results = await asyncio.gather(*tasks)
        return [result for result in results if result]
    
    async def get_image_info_async(self, session, image_name, img_type):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if image_name in self.image_cache:
            width, height = self.image_cache[image_name]
            if width and width > 750:
                return f"{img_type}: {image_name} ({width}px)"
            return None
        
        try:
            image_url = f"https://pim.uroven.pro/pictures/originals/{image_name}"
            headers = {"Range": "bytes=0-2047"}
            
            async with session.get(image_url, headers=headers) as response:
                if response.status in [200, 206]:
                    content = await response.read()
                    image = Image.open(BytesIO(content))
                    width, height = image.width, image.height
                    self.image_cache[image_name] = (width, height)
                    
                    if width > 750:
                        return f"{img_type}: {image_name} ({width}px)"
                        
        except Exception:
            pass
        
        # –ö—ç—à–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        self.image_cache[image_name] = (None, None)
        return None
    
    def save_to_excel(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª"""
        wb = Workbook()
        ws = wb.active
        ws.title = "–¢–æ–≤–∞—Ä—ã —Å –±–æ–ª—å—à–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"
        
        headers = ["ID —Ç–æ–≤–∞—Ä–∞", "–ö–æ–¥ 1–°", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–ë–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="D32F2F", end_color="D32F2F", fill_type="solid")
            cell.alignment = Alignment(horizontal="center")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row, product in enumerate(products, 2):
            ws.cell(row=row, column=1, value=product["id"])
            ws.cell(row=row, column=2, value=product["code_1c"])
            ws.cell(row=row, column=3, value=product["header"])
            ws.cell(row=row, column=4, value="; ".join(product["big_images"]))
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, len(headers) + 1):
            max_length = 0
            column = get_column_letter(col)
            
            for row in range(1, len(products) + 2):
                try:
                    cell_value = str(ws[f'{column}{row}'].value)
                    if len(cell_value) > max_length:
                        max_length = len(cell_value)
                except:
                    pass
            
            adjusted_width = min((max_length + 2) * 1.2, 50)
            ws.column_dimensions[column].width = adjusted_width
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        ws.cell(row=len(products) + 3, column=1, value=f"–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        ws.cell(row=len(products) + 4, column=1, value=f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"products_big_images_ASYNC_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Excel —Ñ–∞–π–ª: {filename}")
        print(f"üìä –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        return len(products)

async def main_async():
    checker = AsyncBigImageChecker()
    
    try:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        checker.authenticate()
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        print("üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        products = await checker.get_products_with_big_images()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ > 750px")
        print(f"üíæ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(checker.image_cache)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        if products:
            checker.save_to_excel(products)
        else:
            print("–¢–æ–≤–∞—Ä—ã —Å –±–æ–ª—å—à–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    return asyncio.run(main_async())

if __name__ == "__main__":
    main()
