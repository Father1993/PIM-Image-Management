#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è image_url –≤ Supabase –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ PIM API
–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ uppercase (.PNG, .JPG –∏ —Ç.–¥.)
"""
import os
import re
import asyncio
import requests
from supabase import create_client
from dotenv import load_dotenv

load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
PIM_API_URL = os.getenv("PIM_API_URL")
PIM_LOGIN = os.getenv("PIM_LOGIN")
PIM_PASSWORD = os.getenv("PIM_PASSWORD")
PIM_IMAGE_URL = os.getenv("PIM_IMAGE_URL")


def uppercase_extension(url):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ URL –≤ uppercase"""
    if not url:
        return url

    pattern = r"\.(jpg|jpeg|png|gif|bmp|webp|svg)(\?|$|#)"

    def replacer(match):
        ext = match.group(1).upper()
        rest = match.group(2)
        return f".{ext}{rest}"

    return re.sub(pattern, replacer, url, flags=re.IGNORECASE)


class ImageUrlUpdater:
    def __init__(self):
        self.token = None
        self.base_url = PIM_API_URL
        self.headers = {"Content-Type": "application/json"}
        self.supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        self.table_name = None

    def authenticate(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ PIM API"""
        auth_data = {"login": PIM_LOGIN, "password": PIM_PASSWORD, "remember": True}
        response = requests.post(
            f"{self.base_url}/sign-in/", json=auth_data, headers=self.headers
        )
        response.raise_for_status()
        self.token = response.json()["data"]["access"]["token"]
        self.headers["Authorization"] = f"Bearer {self.token}"

    def find_supabase_table(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase"""
        table_names = ["product", "products", "Product", "Products"]
        for table_name in table_names:
            try:
                self.supabase.table(table_name).select("id").limit(1).execute()
                self.table_name = table_name
                print(f"–ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
                return True
            except:
                continue
        return False

    async def get_all_products_from_pim(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ PIM —á–µ—Ä–µ–∑ scroll API"""
        scroll_id = None
        products_with_images = []
        batch_num = 0

        while True:
            batch_num += 1
            url = f"{self.base_url}/product/scroll"
            if scroll_id:
                url += f"?scrollId={scroll_id}"

            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            response_data = response.json()

            if not response_data.get("success", False):
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_data.get('message')}")
                break

            data = response_data.get("data", {})
            current_batch = data.get("productElasticDtos", [])

            if not current_batch:
                print("‚õî –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                break

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            for product in current_batch:
                picture = product.get("picture")
                if picture:
                    image_url = f"{PIM_IMAGE_URL}/{picture}"
                    image_url = uppercase_extension(image_url)
                    products_with_images.append(
                        {"id": product.get("id"), "image_url": image_url}
                    )

            print(
                f"–ü–∞–∫–µ—Ç {batch_num}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(current_batch)} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(products_with_images)}"
            )

            scroll_id = data.get("scrollId")
            if not scroll_id:
                print("‚õî –ù–µ—Ç scrollId, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                break

        return products_with_images

    async def update_supabase_batch(self, products_batch):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Supabase"""
        updated = 0
        for product in products_batch:
            try:
                self.supabase.table(self.table_name).update(
                    {"image_url": product["image_url"]}
                ).eq("id", product["id"]).execute()
                updated += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product['id']}: {e}")
        return updated

    async def update_all_products(self, products):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Supabase –ø–∞–∫–µ—Ç–∞–º–∏"""
        total_updated = 0
        batch_size = 100

        for i in range(0, len(products), batch_size):
            batch = products[i : i + batch_size]
            updated = await self.update_supabase_batch(batch)
            total_updated += updated
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {total_updated}/{len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

        return total_updated


async def main():
    updater = ImageUrlUpdater()

    try:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ PIM API...")
        updater.authenticate()
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

        print("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase...")
        if not updater.find_supabase_table():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase!")
            return

        print("üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ PIM API...")
        products = await updater.get_all_products_from_pim()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")

        if not products:
            print("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Supabase...")
        total_updated = await updater.update_all_products(products)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ {total_updated} —Ç–æ–≤–∞—Ä–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
