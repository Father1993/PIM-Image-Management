#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Compo PIM API
"""

import requests
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter

class CompoImageChecker:
    def __init__(self):
        self.token = None
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π URL –¥–ª—è API
        self.base_url = "https://pim.uroven.pro/api/v1"
        self.headers = {"Content-Type": "application/json"}
        
    def authenticate(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        response = requests.post(
            f"{self.base_url}/sign-in/",
            json={
                "login": "s.andrey",
                "password": "KZh-4g2-YFx-Jgm",
                "remember": True
            },
            headers=self.headers
        )
        response.raise_for_status()
        self.token = response.json()["data"]["access"]["token"]
        self.headers["Authorization"] = f"Bearer {self.token}"
    
    def get_products_without_images(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ scroll API"""
        scroll_id = None
        products_without_images = []
        batch_num = 0
        total_processed = 0
        
        while True:
            batch_num += 1
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            url = f"{self.base_url}/product/scroll"
            if scroll_id:
                url += f"?scrollId={scroll_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            response_data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if not response_data.get("success", False):
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                break
            
            data = response_data.get("data", {})
            current_batch = data.get("productElasticDtos", [])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è!
            total_products = data.get("total", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            if not current_batch:
                print("‚õî –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                break
            
            batch_without_images = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            for product in current_batch:
                total_processed += 1
                product_id = product.get("id")
                has_images = self.has_images(product)
                
                if not has_images:
                    batch_without_images += 1
                    products_without_images.append({
                        "id": product_id,
                        "code_1c": product.get("syncUid", ""),
                        "header": product.get("header", "")
                    })
            
            print(f"üîç –ü–∞–∫–µ—Ç {batch_num}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(current_batch)} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {batch_without_images} –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_processed}/{total_products} —Ç–æ–≤–∞—Ä–æ–≤ | –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(products_without_images)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
            scroll_id = data.get("scrollId")
            
            if not scroll_id:
                print("‚õî –ù–µ—Ç scrollId, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                break
                
        return products_without_images
    
    def has_images(self, product):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É —Ç–æ–≤–∞—Ä–∞"""
        picture = product.get("picture")
        pictures = product.get("pictures", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞)
        has_main_picture = bool(picture)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞—Å—Å–∏–≤)
        has_additional_pictures = bool(pictures and len(pictures) > 0)
        
        return has_main_picture or has_additional_pictures
    
    def save_to_excel(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –∏ –≤—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
        wb = Workbook()
        ws = wb.active
        ws.title = "–¢–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["ID —Ç–æ–≤–∞—Ä–∞", "–ö–æ–¥ 1–°", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–°—Ç–∞—Ç—É—Å"]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            # –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="4F81BD", end_color="4F81BD", fill_type="solid")
            cell.alignment = Alignment(horizontal="center")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row, product in enumerate(products, 2):
            ws.cell(row=row, column=1, value=product["id"])
            ws.cell(row=row, column=2, value=product["code_1c"])
            ws.cell(row=row, column=3, value=product["header"])
            ws.cell(row=row, column=4, value="–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, len(headers) + 1):
            max_length = 0
            column = get_column_letter(col)
            
            for row in range(1, len(products) + 2):
                try:
                    if len(str(ws[f'{column}{row}'].value)) > max_length:
                        max_length = len(str(ws[f'{column}{row}'].value))
                except:
                    pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
            adjusted_width = (max_length + 2) * 1.2
            ws.column_dimensions[column].width = adjusted_width
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        ws.cell(row=len(products) + 3, column=1, value=f"–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        ws.cell(row=len(products) + 4, column=1, value=f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"products_without_images_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Excel —Ñ–∞–π–ª: {filename}")
        print(f"üìä –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return len(products)

def main():
    checker = CompoImageChecker()
    
    try:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        checker.authenticate()
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
        products = checker.get_products_without_images()
        
        print(f"\nüìä –ò—Ç–æ–≥:")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(products)}")
        
        count = checker.save_to_excel(products)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()