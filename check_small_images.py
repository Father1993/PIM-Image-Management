#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —à–∏—Ä–∏–Ω–æ–π –º–µ–Ω–µ–µ 500px –≤ Compo PIM API
"""

import requests
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter
from PIL import Image
from io import BytesIO
import logging

class SmallImageChecker:
    def __init__(self):
        self.token = None
        self.base_url = "https://pim.uroven.pro/api/v1"
        self.headers = {"Content-Type": "application/json"}
        self.image_cache = {}  # –ö—ç—à –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    def authenticate(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        response = requests.post(
            f"{self.base_url}/sign-in/",
            json={
                "login": "s.andrey",
                "password": "KZh-4g2-YFx-Jgm",
                "remember": True
            },
            headers=self.headers
        )
        response.raise_for_status()
        self.token = response.json()["data"]["access"]["token"]
        self.headers["Authorization"] = f"Bearer {self.token}"
    
    def get_products_with_small_images(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —à–∏—Ä–∏–Ω–æ–π –º–µ–Ω–µ–µ 500px"""
        scroll_id = None
        products_with_small_images = []
        batch_num = 0
        total_processed = 0
        
        while True:
            batch_num += 1
            url = f"{self.base_url}/product/scroll"
            if scroll_id:
                url += f"?scrollId={scroll_id}"
            
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            response_data = response.json()
            
            if not response_data.get("success", False):
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                break
            
            data = response_data.get("data", {})
            current_batch = data.get("productElasticDtos", [])
            total_products = data.get("total", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            if not current_batch:
                print("‚õî –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                break
            
            batch_small_images = 0
            
            for product in current_batch:
                total_processed += 1
                product_id = product.get("id")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                small_images = self.check_image_sizes(product)
                
                if small_images:
                    batch_small_images += 1
                    products_with_small_images.append({
                        "id": product_id,
                        "code_1c": product.get("articul", ""),
                        "header": product.get("header", ""),
                        "small_images": small_images
                    })
            
            if batch_num % 10 == 0 or batch_small_images > 0:  # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π 10-–π –ø–∞–∫–µ—Ç –∏–ª–∏ –ø—Ä–∏ –Ω–∞—Ö–æ–¥–∫–∞—Ö
                print(f"üìä –ü–∞–∫–µ—Ç {batch_num}: {total_processed}/{total_products} —Ç–æ–≤–∞—Ä–æ–≤ | –ù–∞–π–¥–µ–Ω–æ: {len(products_with_small_images)}")
            
            scroll_id = data.get("scrollId")
            if not scroll_id:
                print("‚õî –ù–µ—Ç scrollId, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                break
                
        return products_with_small_images
    
    def check_image_sizes(self, product):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
        small_images = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        picture = product.get("picture")
        if picture:
            width, height = self.get_image_info(picture)
            if width and width < 500:
                small_images.append(f"–û—Å–Ω–æ–≤–Ω–æ–µ: {picture} ({width}px)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pictures = product.get("pictures", [])
        for pic in pictures:
            width, height = self.get_image_info(pic)
            if width and width < 500:
                small_images.append(f"–î–æ–ø.: {pic} ({width}px)")
        
        return small_images
    
    def get_image_info(self, image_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –∫—ç—à–µ–º)"""
        if image_name in self.image_cache:
            return self.image_cache[image_name]
        
        try:
            image_url = f"https://pim.uroven.pro/pictures/originals/{image_name}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2KB –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
            headers = {"Range": "bytes=0-2047"}
            response = requests.get(image_url, headers=headers, timeout=3)
            
            if response.status_code in [200, 206]:  # 206 –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                image = Image.open(BytesIO(response.content))
                width, height = image.width, image.height
                self.image_cache[image_name] = (width, height)
                return width, height
                        
        except Exception:
            pass
        
        # –ö—ç—à–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–∞–∫ None
        self.image_cache[image_name] = (None, None)
        return None, None
    
    def save_to_excel(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª"""
        wb = Workbook()
        ws = wb.active
        ws.title = "–¢–æ–≤–∞—Ä—ã —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"
        
        headers = ["ID —Ç–æ–≤–∞—Ä–∞", "–ö–æ–¥ 1–°", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–ú–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="D32F2F", end_color="D32F2F", fill_type="solid")
            cell.alignment = Alignment(horizontal="center")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row, product in enumerate(products, 2):
            ws.cell(row=row, column=1, value=product["id"])
            ws.cell(row=row, column=2, value=product["code_1c"])
            ws.cell(row=row, column=3, value=product["header"])
            ws.cell(row=row, column=4, value="; ".join(product["small_images"]))
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, len(headers) + 1):
            max_length = 0
            column = get_column_letter(col)
            
            for row in range(1, len(products) + 2):
                try:
                    cell_value = str(ws[f'{column}{row}'].value)
                    if len(cell_value) > max_length:
                        max_length = len(cell_value)
                except:
                    pass
            
            adjusted_width = min((max_length + 2) * 1.2, 50)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
            ws.column_dimensions[column].width = adjusted_width
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        ws.cell(row=len(products) + 3, column=1, value=f"–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        ws.cell(row=len(products) + 4, column=1, value=f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"products_small_images_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Excel —Ñ–∞–π–ª: {filename}")
        print(f"üìä –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        return len(products)

def main():
    checker = SmallImageChecker()
    
    try:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        checker.authenticate()
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        products = checker.get_products_with_small_images()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ < 500px")
        print(f"üíæ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(checker.image_cache)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        if products:
            checker.save_to_excel(products)
        else:
            print("–¢–æ–≤–∞—Ä—ã —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()
