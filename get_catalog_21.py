#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Compo PIM –≤ Supabase
"""

import os
import asyncio
import aiohttp
from datetime import datetime
from supabase import create_client
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PIM_API_URL = os.getenv("PIM_API_URL")
PIM_LOGIN = os.getenv("PIM_LOGIN")
PIM_PASSWORD = os.getenv("PIM_PASSWORD")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")


class CatalogSyncer:
    def __init__(self):
        self.token = None
        self.categories = []

    async def authenticate(self, session):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ PIM API"""
        auth_data = {"login": PIM_LOGIN, "password": PIM_PASSWORD, "remember": True}

        async with session.post(f"{PIM_API_URL}/sign-in/", json=auth_data) as response:
            response.raise_for_status()
            data = await response.json()
            self.token = data["data"]["access"]["token"]
            return self.token

    async def get_catalog(self, session):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å ID-21"""
        headers = {"Authorization": f"Bearer {self.token}"}

        async with session.get(
            f"{PIM_API_URL}/catalog/21", headers=headers
        ) as response:
            response.raise_for_status()
            data = await response.json()
            return data["data"]

    def parse_categories(self, category, parent_id=None, level=0):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        self.categories.append(
            {
                "id": category["id"],
                "parent_id": parent_id,
                "header": category["header"],
                "sync_uid": category["syncUid"],
                "level": category.get(
                    "level", level
                ),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º level –∏–∑ API –µ—Å–ª–∏ –µ—Å—Ç—å
                "product_count": category.get("productCount", 0),
                "product_count_additional": category.get("productCountAdditional", 0),
                "created_at": category.get("createdAt"),
                "updated_at": category.get("updatedAt"),
            }
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for child in category.get("children", []):
            self.parse_categories(
                child, category["id"], category.get("level", level) + 1
            )

    def clear_and_insert(self, client):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            client.table("categories").delete().neq("id", 0).execute()
            print(f"üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ categories –æ—á–∏—â–µ–Ω–∞")

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 100
            for i in range(0, len(self.categories), 100):
                batch = self.categories[i : i + 100]
                client.table("categories").insert(batch).execute()
                print(
                    f"üìù –í—Å—Ç–∞–≤–ª–µ–Ω–æ {min(i+100, len(self.categories))}/{len(self.categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                )
        except Exception as e:
            if "does not exist" in str(e):
                print(
                    "‚ùå –¢–∞–±–ª–∏—Ü–∞ categories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –≤ Supabase SQL Editor"
                )
            raise


async def main():
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞...")

        syncer = CatalogSyncer()

        # –†–∞–±–æ—Ç–∞–µ–º —Å PIM API
        async with aiohttp.ClientSession() as session:
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ PIM API...")
            await syncer.authenticate(session)
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

            print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ ID-21...")
            catalog_data = await syncer.get_catalog(session)
            print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω")

            print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (id=21)
            syncer.parse_categories(catalog_data, catalog_data.get("parentId"))
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(syncer.categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

        # –†–∞–±–æ—Ç–∞–µ–º —Å Supabase
        print("üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...")
        client = create_client(SUPABASE_URL, SUPABASE_KEY)

        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        syncer.clear_and_insert(client)

        print(
            f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(syncer.categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
